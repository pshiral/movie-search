{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","options","setOptions","selected","setSelected","handleChange","useCallback","cb","id","args","clearTimeout","setTimeout","apply","debounce","event","text","target","value","length","fetch","then","response","json","result","Search","slice","className","autoComplete","type","name","placeholder","onChange","map","movie","onClick","Title","alt","src","Poster","Year","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NA0EeA,MAvEf,WACE,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,OAC4BF,mBAAS,MADrC,mBACGG,EADH,KACaC,EADb,KAeMC,EAAeC,sBAZJ,SAACC,GAChB,IAAIC,EAAK,KAET,OAAO,WAAc,IAAD,uBAATC,EAAS,yBAATA,EAAS,gBAClBC,aAAaF,GAEbA,EAAKG,YAAW,WACdJ,EAAGK,MAAM,KAAMH,KACd,MAI0BI,EAAS,SAACC,GAAW,IAAD,EAC/CC,EAAI,OAAGD,QAAH,IAAGA,GAAH,UAAGA,EAAOE,cAAV,aAAG,EAAeC,MAEtBF,EAAKG,OAAS,EAChBC,MAAM,6BAAD,OAA8BJ,EAA9B,qBAAsDK,MAAK,SAACC,GAC/D,OAAOA,EAASC,UACfF,MAAK,SAACC,GAAc,IAAD,EACdE,EAAM,OAAGF,QAAH,IAAGA,GAAH,UAAGA,EAAUG,cAAb,aAAG,EAAkBC,MAAM,EAAG,GAGxCvB,EADEqB,EACSF,EAASG,OAAOC,MAAM,EAAG,GAEzB,OAIfvB,EAAW,OAEX,IAEJ,OACE,sBAAKwB,UAAU,MAAf,UACE,mCACE,oBAAIA,UAAU,UAAd,sCAGA,sBAAMA,UAAU,KAAhB,qCAEF,+BACE,uBAAMC,aAAa,MAAnB,UACE,0BAASD,UAAU,eAAnB,UACE,uBAAOE,KAAK,OAAOC,KAAK,SAASC,YAAY,iBAC3C,eAAa,QAAQC,SAAU1B,IACjC,qBAAKqB,UAAU,UAAf,gBACGzB,QADH,IACGA,OADH,EACGA,EAAS+B,KAAI,SAACC,GAAD,OACZ,qBAAKC,QAAS,WACZhC,EAAW,IACXE,EAAY6B,IAFd,SAGIA,EAAME,gBAIfhC,GAAY,0BAASuB,UAAU,OAAnB,UACX,qBAAKU,IAAKjC,EAASgC,MAAOE,IAAKlC,EAASmC,SACxC,sBAAKZ,UAAU,QAAf,UACE,2CAAcvB,EAASgC,SACvB,0CAAahC,EAASoC,uBCrDrBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.ab90a115.chunk.js","sourcesContent":["import { useCallback, useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [options, setOptions] = useState([]),\n    [selected, setSelected] = useState(null);\n\n  const debounce = (cb) => {\n    let id = null;\n\n    return (...args) => {\n      clearTimeout(id);\n\n      id = setTimeout(() => {\n        cb.apply(null, args);\n      }, 300);\n    };\n  };\n\n  const handleChange = useCallback(debounce((event) => {\n    let text = event?.target?.value;\n\n    if (text.length > 2) {\n      fetch(`http://www.omdbapi.com/?s=${text}&apiKey=74de3445`).then((response) => {\n        return response.json();\n      }).then((response) => {\n        const result = response?.Search?.slice(0, 5);\n\n        if (result) {\n          setOptions(response.Search.slice(0, 5));\n        } else {\n          setOptions([]);\n        }\n      });\n    } else {\n      setOptions([]);\n    }\n  }), []);\n\n  return (\n    <div className=\"app\">\n      <header>\n        <h2 className=\"heading\">\n          Web Developer Assignment\n        </h2>\n        <span className=\"by\">Sr Software Engineer</span>\n      </header>\n      <main>\n        <form autoComplete=\"off\">\n          <section className=\"autocomplete\">\n            <input type=\"text\" name=\"places\" placeholder=\"Search a place\"\n              data-test-id=\"input\" onChange={handleChange} />\n            <div className=\"options\">\n              {options?.map((movie) => (\n                <div onClick={() => {\n                  setOptions([]);\n                  setSelected(movie);\n                }}>{movie.Title}</div>\n              ))}\n            </div>\n          </section>\n          {selected && <section className=\"card\">\n            <img alt={selected.Title} src={selected.Poster} />\n            <div className=\"title\">\n              <span>Title: {selected.Title}</span>\n              <span>Year: {selected.Year}</span>\n            </div>\n          </section>}\n        </form>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}